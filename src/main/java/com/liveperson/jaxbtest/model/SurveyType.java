//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.02.05 at 02:53:59 PM GMT 
//


package com.liveperson.jaxbtest.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for surveyType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="surveyType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Pre-Chat"/>
 *     &lt;enumeration value="Exit"/>
 *     &lt;enumeration value="Chat Operator"/>
 *     &lt;enumeration value="Offline"/>
 *     &lt;enumeration value="Pre-Call"/>
 *     &lt;enumeration value="Call-Exit"/>
 *     &lt;enumeration value="Call-Offline"/>
 *     &lt;enumeration value="Pre-Call-Escalate"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "surveyType")
@XmlEnum
public enum SurveyType {

    @XmlEnumValue("Pre-Chat")
    PRE_CHAT("Pre-Chat"),
    @XmlEnumValue("Exit")
    EXIT("Exit"),
    @XmlEnumValue("Chat Operator")
    CHAT_OPERATOR("Chat Operator"),
    @XmlEnumValue("Offline")
    OFFLINE("Offline"),
    @XmlEnumValue("Pre-Call")
    PRE_CALL("Pre-Call"),
    @XmlEnumValue("Call-Exit")
    CALL_EXIT("Call-Exit"),
    @XmlEnumValue("Call-Offline")
    CALL_OFFLINE("Call-Offline"),
    @XmlEnumValue("Pre-Call-Escalate")
    PRE_CALL_ESCALATE("Pre-Call-Escalate");
    private final String value;

    SurveyType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SurveyType fromValue(String v) {
        for (SurveyType c: SurveyType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
